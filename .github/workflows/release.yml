name: Create Vendored Dependencies Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v0.2.3, v1.0.0, etc.

permissions:
  contents: write  # Required to create releases

jobs:
  create-vendor-archive:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Clean previous builds
      run: |
        rm -rf node_modules package-lock.json
        
    - name: Install dependencies
      run: |
        npm install --production
        
    - name: Create vendored dependencies archive
      run: |
        # Get the tag name
        TAG_NAME=${GITHUB_REF#refs/tags/}
        ARCHIVE_NAME="karere-backend-node-modules-${TAG_NAME}.tar.gz"
        
        echo "Creating vendored archive for ${TAG_NAME}"
        
        # Create the archive with node_modules and package-lock.json
        tar -czf "${ARCHIVE_NAME}" node_modules/ package-lock.json
        
        # Get file info
        FILE_SIZE=$(stat -c%s "${ARCHIVE_NAME}")
        SHA256=$(sha256sum "${ARCHIVE_NAME}" | cut -d' ' -f1)
        
        echo "Archive created: ${ARCHIVE_NAME}"
        echo "Size: ${FILE_SIZE} bytes"
        echo "SHA256: ${SHA256}"
        
        # Save info for later steps
        echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV
        echo "FILE_SIZE=${FILE_SIZE}" >> $GITHUB_ENV
        echo "SHA256=${SHA256}" >> $GITHUB_ENV
        echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
        
    - name: Generate Flatpak manifest snippet
      run: |
        cat > flatpak-manifest-snippet.json << EOF
        {
          "type": "archive",
          "url": "https://github.com/${GITHUB_REPOSITORY}/releases/download/${TAG_NAME}/${ARCHIVE_NAME}",
          "sha256": "${SHA256}",
          "dest": "KarereBackend"
        }
        EOF
        
        echo "Generated Flatpak manifest snippet:"
        cat flatpak-manifest-snippet.json
        
    - name: Create Release Notes
      run: |
        cat > release-notes.md << EOF
        # Karere Backend ${TAG_NAME} - Vendored Dependencies
        
        This release contains the vendored Node.js dependencies for Karere Backend ${TAG_NAME}.
        
        ## ðŸ“¦ Archive Details
        - **File**: \`${ARCHIVE_NAME}\`
        - **Size**: ${FILE_SIZE} bytes ($(echo "scale=2; ${FILE_SIZE}/1024/1024" | bc) MB)
        - **SHA256**: \`${SHA256}\`
        
        ## ðŸš€ Usage in Flatpak
        
        Add this to your Flatpak manifest sources array:
        
        \`\`\`json
        $(cat flatpak-manifest-snippet.json)
        \`\`\`
        
        ## ðŸ“‹ What's Included
        - All production Node.js dependencies from package.json
        - package-lock.json for reproducible builds
        - Ready for offline npm operations in Flatpak builds
        
        ## ðŸ”§ Dependencies Included
        $(npm list --production --depth=0 2>/dev/null | grep -E '^[â”œâ””]' | sed 's/^[â”œâ””]â”€â”€ /- /' || echo "- See package.json for full dependency list")
        
        ---
        
        This archive follows the Flathub-approved vendoring approach for Node.js dependencies.
        EOF
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ env.ARCHIVE_NAME }}
          flatpak-manifest-snippet.json
        body_path: release-notes.md
        draft: false
        prerelease: false
        tag_name: ${{ env.TAG_NAME }}
        name: "Karere Backend ${{ env.TAG_NAME }} - Vendored Dependencies"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Get commit hash
      run: |
        COMMIT_HASH=$(git rev-parse HEAD)
        echo "COMMIT_HASH=${COMMIT_HASH}" >> $GITHUB_ENV

    - name: Trigger frontend update (optional)
      if: github.repository == 'tobagin/KarereBackend'
      run: |
        # Trigger the frontend repository to update its manifest
        # This requires a personal access token with repo scope
        curl -X POST \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token ${{ secrets.FRONTEND_UPDATE_TOKEN }}" \
          https://api.github.com/repos/tobagin/Karere/dispatches \
          -d "{
            \"event_type\": \"backend-release\",
            \"client_payload\": {
              \"version\": \"${TAG_NAME}\",
              \"sha256\": \"${SHA256}\",
              \"commit\": \"${COMMIT_HASH}\"
            }
          }" || echo "Frontend update trigger failed (token may not be configured)"

    - name: Output summary
      run: |
        echo "## ðŸŽ‰ Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Archive**: \`${ARCHIVE_NAME}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Size**: ${FILE_SIZE} bytes" >> $GITHUB_STEP_SUMMARY
        echo "**SHA256**: \`${SHA256}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Commit**: \`${COMMIT_HASH}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“‹ Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. The Flatpak manifest should be automatically updated via PR" >> $GITHUB_STEP_SUMMARY
        echo "2. Review and merge the auto-generated PR in the frontend repo" >> $GITHUB_STEP_SUMMARY
        echo "3. Test the build with: \`flatpak-builder --force-clean builddir manifest.yml\`" >> $GITHUB_STEP_SUMMARY
        echo "4. The vendored dependencies are available at:" >> $GITHUB_STEP_SUMMARY
        echo "   https://github.com/${GITHUB_REPOSITORY}/releases/download/${TAG_NAME}/${ARCHIVE_NAME}" >> $GITHUB_STEP_SUMMARY
